import base64
import sys

encoded_script =
b""""""

decoded_script = base64.b64decode(encoded_script)

exec(compile(decoded_script, filename='<string>', mode='exec'))
